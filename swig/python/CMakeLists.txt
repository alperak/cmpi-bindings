#
# CMakeLists.txt for cmpi-bindings/swig/python
#

enable_testing()
add_subdirectory(tests)

SET (BUILD_SHARED_LIBS ON)

IF (BUILD_PYTHON2)
  IF (BUILD_PYTHON3)
    MESSAGE(FATAL_ERROR "Can't build Python2 and Python3 at the same time, use -DBUILD_PYTHON2=YES **or** -DBUILD_PYTHON3=YES")
  ENDIF (BUILD_PYTHON3)

  FIND_PACKAGE (Python2 COMPONENTS Interpreter Development REQUIRED)
  IF (NOT Python2_FOUND)
    MESSAGE(ERROR "Can't find Python2")
  ENDIF (NOT Python2_FOUND)
 
  SET(PYTHON_EXECUTABLE ${Python2_EXECUTABLE})
  SET(PYTHON_LIB_DIR ${Python2_LIBRARY_DIRS})
  SET(PYTHON_INCLUDE_DIRS ${Python2_INCLUDE_DIRS})
  SET(PYTHON_INCLUDE_PATH ${Python2_INCLUDE_PATH})
  SET(PYTHON_STDLIB ${Python2_STDLIB})
  SET(PYTHON_STDARCH ${Python2_STDARCH})
  SET(PYTHON_SITELIB ${Python2_SITELIB})
  SET(PYTHON_SITEARCH ${Python2_SITEARCH})

ELSEIF (BUILD_PYTHON3)

  IF (BUILD_PYTHON2)
    MESSAGE(FATAL_ERROR "Can't build Python2 and Python3 at the same time, use -DBUILD_PYTHON2=YES **or** -DBUILD_PYTHON3=YES")
  ENDIF (BUILD_PYTHON2)

  FIND_PACKAGE (Python3 COMPONENTS Interpreter Development REQUIRED)
  IF (NOT Python3_FOUND)
    MESSAGE(ERROR "Can't find Python3")
  ENDIF (NOT Python3_FOUND)

  SET(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
  SET(PYTHON_LIB_DIR ${Python3_LIBRARY_DIRS})
  SET(PYTHON_INCLUDE_DIRS ${Python3_INCLUDE_DIRS})
  SET(PYTHON_INCLUDE_PATH ${Python3_INCLUDE_PATH})
  SET(PYTHON_STDLIB ${Python3_STDLIB})
  SET(PYTHON_STDARCH ${Python3_STDARCH})
  SET(PYTHON_SITELIB ${Python3_SITELIB})
  SET(PYTHON_SITEARCH ${Python3_SITEARCH})
ELSE (BUILD_PYTHON3)
  MESSAGE(ERROR "No Python found")
ENDIF (BUILD_PYTHON2)

# CMake 3.30 and Python 3.11 do not set _STDLIB, _STDARCH, _SITELIB, or _SITEARCH

# CMake + Python not always define proper STD or SITE directories :-/
execute_process(
  COMMAND "${PYTHON_EXECUTABLE}" -c "if True:
    import sysconfig as sc
    print(sc.get_path(name='stdlib'))"
  OUTPUT_VARIABLE PYTHON_SITE
  OUTPUT_STRIP_TRAILING_WHITESPACE)            

MESSAGE(STATUS "Python executable:    ${PYTHON_EXECUTABLE}")
MESSAGE(STATUS "Python inc dir:       ${PYTHON_INCLUDE_PATH}")
MESSAGE(STATUS "Python lib dir:       ${PYTHON_LIB_DIR}")
MESSAGE(STATUS "Python libraries:     ${PYTHON_LIBRARIES}")
MESSAGE(STATUS "Python ldflags:       ${PYTHON_LDFLAGS}")
MESSAGE(STATUS "Python site dir:      ${PYTHON_SITE}")
MESSAGE(STATUS "Python site lib dir:  ${PYTHON_SITELIB}")
MESSAGE(STATUS "Python site arch dir: ${PYTHON_SITEARCH}")

SET( SWIG_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/cmpi_wrap.c" )
SET( SWIG_INPUT "${CMAKE_CURRENT_SOURCE_DIR}/../cmpi.i" )

ADD_CUSTOM_COMMAND (
   OUTPUT  ${SWIG_OUTPUT}
   COMMAND ${CMAKE_COMMAND} -E echo_append "Creating wrapper code for Python ..."
   COMMAND ${SWIG_EXECUTABLE} -python -Wall -threads -features autodoc -o ${SWIG_OUTPUT} -outdir ${CMAKE_CURRENT_BINARY_DIR} -I/usr/include ${SWIG_INPUT}
   COMMAND ${CMAKE_COMMAND} -E echo "Done."
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../*.i
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../../src/*.c
)

SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -g" )

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/.. )
INCLUDE_DIRECTORIES( ${PYTHON_INCLUDE_PATH} )
INCLUDE_DIRECTORIES( ${PYTHON_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${CMPI_INCLUDE_DIR} )

ADD_DEFINITIONS(-DCMPI_PLATFORM_LINUX_GENERIC_GNU -DCMPI_VERSION=200)

#
# cmpi_provider: provider .so
#
IF (BUILD_PYTHON3)
SET( NAME py3CmpiProvider )
ELSE (BUILD_PYTHON3)
SET( NAME pyCmpiProvider )
ENDIF (BUILD_PYTHON3)

ADD_LIBRARY( ${NAME} SHARED ${SWIG_OUTPUT})
TARGET_LINK_LIBRARIES( ${NAME} ${PYTHON_LIBRARIES} )
TARGET_LINK_LIBRARIES( ${NAME} pthread )
TARGET_LINK_LIBRARIES( ${NAME} dl )
TARGET_LINK_LIBRARIES( ${NAME} util )

INSTALL(TARGETS ${NAME} LIBRARY DESTINATION ${CMPI_LIBRARY_DIR})
# .py: swig generated
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/cmpi.py DESTINATION ${PYTHON_SITELIB} )


#
# cmpi_pywbem_bindings.py: provider implementation
#
INSTALL(FILES cmpi_pywbem_bindings.py DESTINATION ${PYTHON_SITELIB} )
#INSTALL(FILES Py_UnixProcessProvider.py DESTINATION /usr/lib/pycim )

INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c \"from py_compile import compile; compile('\$ENV{DESTDIR}${PYTHON_SITELIB}/cmpi.py', dfile='${PYTHON_SITELIB}/cmpi.py')\")")

INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c \"from py_compile import compile; compile('\$ENV{DESTDIR}${PYTHON_SITELIB}/cmpi_pywbem_bindings.py', dfile='${PYTHON_SITELIB}/cmpi_pywbem_bindings.py')\")")
